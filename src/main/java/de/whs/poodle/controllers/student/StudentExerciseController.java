/*
 * Copyright 2015 Westf√§lische Hochschule
 *
 * This file is part of Poodle.
 *
 * Poodle is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Poodle is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Poodle.  If not, see <http://www.gnu.org/licenses/>.
 */
package de.whs.poodle.controllers.student;

import java.util.ArrayList;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;

import de.whs.poodle.beans.CourseTerm;
import de.whs.poodle.beans.Exercise;
import de.whs.poodle.beans.Student;
import de.whs.poodle.beans.statistics.Statistic;
import de.whs.poodle.repositories.ExerciseRepository;
import de.whs.poodle.repositories.StatisticsRepository;
import de.whs.poodle.repositories.exceptions.NotFoundException;

/*
 * Show a single exercise for a student. The CKEditor "link exercise" plugin generates
 * links to this page. Since the link is hardcoded in the HTML code generated by CKEditor,
 * we always use the root ID of the exercise here. Otherwise we would have to edit the link
 * in the HTML code in the database when the exercise is updated.
 */
@Controller
@RequestMapping("student/exercises/{rootId}")
public class StudentExerciseController {

    @Autowired
    private ExerciseRepository exerciseRepo;

    @Autowired
    private StatisticsRepository statisticsRepo;

    @RequestMapping
    public String get(
            @ModelAttribute("isStudent") boolean isStudent,
            @ModelAttribute("globalCourseTerms") ArrayList<CourseTerm> courseTerms,
            @ModelAttribute Student student,
            Model model,
            @PathVariable int rootId) {
        Exercise exercise = exerciseRepo.getLatestForRootId(rootId);
        if (exercise == null)
            throw new NotFoundException();

        if (isStudent) {
            // get feedback that the student has given for this exercise, returns null if none
            Statistic statistic = statisticsRepo.getForExerciseAndStudent(exercise.getRootId(), student.getId());
            model.addAttribute("statistic", statistic);

            // if the feedback was commented, lets mark it as "seen"
            if (statistic != null && statistic.isCommented() && !statistic.getComment().isSeen()) {
                statisticsRepo.setInstructorCommentSeen(statistic.getId());
            }
        }

        model.addAttribute("exercise", exercise);
        return "student/exercise";
    }
}
